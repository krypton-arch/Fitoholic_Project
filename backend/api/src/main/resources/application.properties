spring.application.name=api
# =======================================
# DATABASE (MySQL) CONFIGURATION
# =======================================
# The URL to our database. It will create a database named 'fitoholic_db' if it doesn't exist.
spring.datasource.url=jdbc:mysql://localhost:3306/fitoholic_db?createDatabaseIfNotExist=true

# The username for our database. 'root' is the default.
spring.datasource.username=root

# The password for our database. CHANGE THIS to the password you created during MySQL installation.
spring.datasource.password=root

# =======================================
# JPA / HIBERNATE CONFIGURATION
# =======================================
# This is the magic part. 'update' tells our app to automatically create or update
# database tables based on the Java code we write. No manual SQL needed for now!
spring.jpa.hibernate.ddl-auto=update

# This will print the actual SQL queries in the console. It's very useful for debugging.
spring.jpa.show-sql=true

# Specifies the "dialect" for MySQL, helping Hibernate write correct SQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# =======================================
# JWT CONFIGURATION
# =======================================
# A long, random, and secret string for signing our JWTs.
# In a real app, this MUST be stored securely and not in plaintext here.
# For our local project, this is fine.
# You can generate your own at a site like: https://www.allkeysgenerator.com/
jwt.secret=aVeryLongAndSecureSecretKeyForFitoholicAppThatIsAtLeast256BitsLong

# Token validity in milliseconds (e.g., 24 hours)
jwt.expiration.ms=86400000

# =======================================
# RAZORPAY CONFIGURATION
# =======================================
razorpay.key.id=rzp_test_wR6Y6VmVli5z8Y
razorpay.key.secret=dJXtljarHN2ovix2gQh5r5AL

# =======================================
# GEMINI AI CONFIGURATION
# =======================================
gemini.api.key=AIzaSyCeKWqe8GIgYFyu33riAqG3IHyv1RchaHk
gemini.api.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent


# =======================================
# EMAIL (SMTP) CONFIGURATION - USING GMAIL
# =======================================
# Gmail's SMTP server address
spring.mail.host=smtp.gmail.com

# Port for TLS, which is required by Gmail
spring.mail.port=587

# Your full Gmail address that will be used to send the emails
spring.mail.username=manomitkundu1590@gmail.com

# THE 16-CHARACTER APP PASSWORD you generated in the previous step
spring.mail.password=qlslqrjkqsefhwxj

# These properties are mandatory for connecting to Gmail's SMTP server
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

